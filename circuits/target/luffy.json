{
  "noir_version": "0.23.0+5be9f9d7e2f39ca228df10e5a530474af0331704",
  "hash": 17951759931780011047,
  "abi": {
    "parameters": [
      {
        "name": "signer_pub_x_key",
        "type": {
          "kind": "array",
          "length": 32,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "private"
      },
      {
        "name": "signer_pub_y_key",
        "type": {
          "kind": "array",
          "length": 32,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "private"
      },
      {
        "name": "signature",
        "type": {
          "kind": "array",
          "length": 64,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "private"
      },
      {
        "name": "selected_players_points",
        "type": {
          "kind": "array",
          "length": 11,
          "type": {
            "kind": "array",
            "length": 32,
            "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
          }
        },
        "visibility": "private"
      },
      {
        "name": "player_points_merkle_paths",
        "type": {
          "kind": "array",
          "length": 11,
          "type": {
            "kind": "array",
            "length": 7,
            "type": {
              "kind": "array",
              "length": 32,
              "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
            }
          }
        },
        "visibility": "private"
      },
      {
        "name": "all_player_points_merkle_root",
        "type": {
          "kind": "array",
          "length": 32,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "private"
      },
      {
        "name": "captain",
        "type": { "kind": "integer", "sign": "unsigned", "width": 8 },
        "visibility": "public"
      },
      {
        "name": "vice_captain",
        "type": { "kind": "integer", "sign": "unsigned", "width": 8 },
        "visibility": "public"
      },
      {
        "name": "is_random",
        "type": { "kind": "boolean" },
        "visibility": "public"
      },
      {
        "name": "selected_player_ids",
        "type": {
          "kind": "array",
          "length": 11,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "public"
      },
      {
        "name": "selected_squad_hash",
        "type": {
          "kind": "array",
          "length": 32,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "public"
      },
      {
        "name": "claimed_player_points",
        "type": { "kind": "integer", "sign": "unsigned", "width": 64 },
        "visibility": "public"
      }
    ],
    "param_witnesses": {
      "all_player_points_merkle_root": [{ "start": 2944, "end": 2976 }],
      "captain": [{ "start": 2976, "end": 2977 }],
      "claimed_player_points": [{ "start": 3022, "end": 3023 }],
      "is_random": [{ "start": 2978, "end": 2979 }],
      "player_points_merkle_paths": [{ "start": 480, "end": 2944 }],
      "selected_player_ids": [{ "start": 2979, "end": 2990 }],
      "selected_players_points": [{ "start": 128, "end": 480 }],
      "selected_squad_hash": [{ "start": 2990, "end": 3022 }],
      "signature": [{ "start": 64, "end": 128 }],
      "signer_pub_x_key": [{ "start": 0, "end": 32 }],
      "signer_pub_y_key": [{ "start": 32, "end": 64 }],
      "vice_captain": [{ "start": 2977, "end": 2978 }]
    },
    "return_type": null,
    "return_witnesses": []
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "44": {
      "source": "mod tests;\nuse dep::std;\nuse dep::ecrecover;\n\nglobal MERKLE_DEPTH = 7;\nfn main(\n    signer_pub_x_key: [u8; 32],\n    signer_pub_y_key: [u8; 32],\n    signature: [u8; 64],\n    selected_players_points: [[u8; 32]; 11],\n    player_points_merkle_paths: [[[u8; 32]; MERKLE_DEPTH]; 11],\n    all_player_points_merkle_root: [u8; 32],\n    captain: pub u8,\n    vice_captain: pub u8,\n    is_random: pub bool,\n    selected_player_ids: pub [u8; 11],\n    selected_squad_hash: pub [u8; 32],\n    claimed_player_points: pub u64\n) {\n    ecdsa_verification(\n        signer_pub_x_key,\n        signer_pub_y_key,\n        signature,\n        selected_squad_hash\n    );\n\n    verify_squad_hash(selected_player_ids, selected_squad_hash);\n\n    // verify_all_merkle_roots(\n    //     selected_player_ids,\n    //     selected_players_points,\n    //     player_points_merkle_paths,\n    //     all_player_points_merkle_root\n    // );\n\n    calculate_points(\n        selected_players_points,\n        claimed_player_points,\n        captain,\n        vice_captain,\n        is_random\n    );\n}\n\nfn verify_squad_hash(player_ids: [u8; 11], squad_hash: [u8; 32]) {\n    let computed_squad_hash= std::hash::keccak256(player_ids, 11);\n    assert(computed_squad_hash == squad_hash);\n}\n\nfn ecdsa_verification(\n    signer_pub_x_key: [u8; 32],\n    signer_pub_y_key: [u8; 32],\n    signature: [u8; 64],\n    hash: [u8; 32]\n) {\n    let computedAddress: Field = ecrecover::secp256k1::PubKey::from_xy(signer_pub_x_key, signer_pub_y_key).to_eth_address(); // Compute address from public key\n    let recoveredAddress = ecrecover::ecrecover(signer_pub_x_key, signer_pub_y_key, signature, hash);\n\n    assert(computedAddress == recoveredAddress);\n}\n\nfn verify_all_merkle_roots(\n    player_ids: [u8; 11],\n    players_points: [[u8; 32]; 11],\n    merkle_paths: [[[u8; 32]; MERKLE_DEPTH]; 11],\n    merkle_root: [u8; 32]\n) {\n    for i in 0..11 {\n        compute_and_verify_merkle_root(players_points[i], player_ids[i], merkle_paths[i], merkle_root);\n    }\n}\n\nfn compute_and_verify_merkle_root(\n    leaf: [u8; 32],\n    leaf_index: u8,\n    proof: [[u8; 32]; MERKLE_DEPTH],\n    all_points_merkle_root: [u8; 32]\n) {\n    let mut computed_merkle_root: [u8; 32] = [0; 32];\n    computed_merkle_root=leaf;\n    let mut leaf_index_mut= leaf_index;\n    for i in 0..MERKLE_DEPTH {\n        if leaf_index_mut % 2 == 0 {\n            computed_merkle_root = std::hash::keccak256(concatenate_leafs(computed_merkle_root, proof[i]), 64);\n        } else {\n            computed_merkle_root = std::hash::keccak256(concatenate_leafs(proof[i], computed_merkle_root), 64);\n        }\n        leaf_index_mut = leaf_index_mut / 2;\n    }\n\n    assert(computed_merkle_root == all_points_merkle_root);\n}\n\nfn concatenate_leafs(leaf1: [u8; 32], leaf2: [u8; 32]) -> [u8; 64] {\n    let mut arr: [u8; 64] = [0; 64];\n    for i in 0..32 {\n        arr[i] = leaf1[i];\n        arr[i + 32] = leaf2[i];\n    }\n    arr\n}\n\nfn calculate_points(\n    player_points: [[u8; 32]; 11],\n    claimed_player_points: u64,\n    captain: u8,\n    vice_captain: u8,\n    is_random: bool\n) {\n    let mut calculated_total_points: u64 = 0;\n    let mut counter: u8 = 0;\n    let mut captainMultiplier: u64 = 0;\n    let mut vice_captainMultiplier: u64 = 0;\n\n    if is_random {\n        captainMultiplier = 4;\n        vice_captainMultiplier = 3;\n    } else {\n        captainMultiplier = 3;\n        vice_captainMultiplier = 2;\n    }\n\n    for point in player_points {\n        let mut player_point: u64 = 0;\n        for byte in point {\n            player_point += byte as u64;\n        }\n        if counter == captain {\n            player_point = player_point * captainMultiplier;\n        } else if counter == vice_captain {\n            player_point = player_point * vice_captainMultiplier;\n        }\n        calculated_total_points += player_point;\n        counter += 1;\n    }\n\n    assert(calculated_total_points == claimed_player_points);\n}\n",
      "path": "/Users/gabrielantonyxaviour/Developer/projects/luffy/sindri/circuits/src/main.nr"
    },
    "45": {
      "source": "use dep::std;\n \nmod secp256k1;\n\nfn ecrecover(\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64], // clip v value\n    hashed_message: [u8; 32]\n) -> Field {\n    let key = secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);\n\n    assert(key.verify_sig(signature, hashed_message));\n    let addr = key.to_eth_address();\n\n    addr\n}\n\n#[test]\nfn test_ecrecover() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let addr = ecrecover(pub_key_x, pub_key_y, signature, hashed_message);\n    assert(addr == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n",
      "path": "/Users/gabrielantonyxaviour/nargo/github.com/colinnielsen/ecrecover-noirv0.19.0/src/lib.nr"
    },
    "46": {
      "source": "use dep::std;\n\nuse dep::array_helpers;\n\nstruct PubKey {\n    pub_x: [u8; 32],\n    pub_y: [u8; 32],\n}\n\nunconstrained\nfn split_uncompressed_pub_key(\n    pub_key: [u8; 65]\n) -> ([u8; 32], [u8; 32]) {\n    let mut pub_key_x: [u8; 32] = [0; 32];\n    let mut pub_key_y: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        pub_key_x[i] = pub_key[i + 1];\n        pub_key_y[i] = pub_key[i + 32 + 1];\n    };\n\n    (pub_key_x, pub_key_y)\n}\n\nimpl PubKey {\n    fn from_xy(pub_x: [u8; 32], pub_y: [u8; 32]) -> PubKey {\n        PubKey {\n            pub_x,\n            pub_y,\n        }\n    }\n\n    fn from_unified(pub_key: [u8; 64]) -> PubKey {\n        let (key_x, key_y) = array_helpers::split_u8_64_unconstrained(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    fn from_uncompressed(pub_key: [u8; 65]) -> PubKey {\n        assert(pub_key[0] == 0x04);\n        let (key_x, key_y) = split_uncompressed_pub_key(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    fn verify_sig(self, signature: [u8; 64], hashed_message: [u8; 32]) -> bool {\n        std::ecdsa_secp256k1::verify_signature(self.pub_x, self.pub_y, signature, hashed_message)\n    }\n\n    fn to_eth_address(self) -> Field {\n        let pub_key = array_helpers::u8_32_to_u8_64_unconstrained(self.pub_x, self.pub_y);\n        let hashed_pub_key = std::hash::keccak256(pub_key, 64);\n\n        let mut addr: Field = 0;\n        for i in 0..20 {\n            // shift left by 8 and add the new value\n            addr = (addr * 256) + hashed_pub_key[i + 12] as Field;\n        }\n\n        addr\n    }\n\n    fn ecrecover(\n        self,\n        signature: [u8; 64],\n        hashed_message: [u8; 32]\n    ) -> Field {\n        assert(self.verify_sig(signature, hashed_message));\n\n        self.to_eth_address()\n    }\n}\n\n\n#[test]\nfn test_ecrecover_via_key() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let key = PubKey::from_xy(pub_key_x, pub_key_y);\n    assert(key.ecrecover(signature, hashed_message) == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n",
      "path": "/Users/gabrielantonyxaviour/nargo/github.com/colinnielsen/ecrecover-noirv0.19.0/src/secp256k1.nr"
    },
    "47": {
      "source": "use dep::std;\n\nfn u8_32s_to_u64_16(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u64; 16] {\n    let mut combined_u64: [u64; 16] = [0; 16];\n    \n    for i in 0..4 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_a[i*8+j] as u64) << ((56 - j*8) as u64);\n        }\n         combined_u64[i] = value;\n    }\n    for i in 4..8 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_b[(i-4)*8+j] as u64) << ((56 - j*8) as u64);\n        }\n         combined_u64[i] = value;\n    }\n\n    combined_u64\n}\n\nunconstrained\nfn u8_32s_to_u64_16_unconstrained(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u64; 16] {\n    let mut combined_u64: [u64; 16] = [0; 16];\n    \n    for i in 0..4 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_a[i*8+j] as u64) << ((56 - j*8) as u64);\n        }\n         combined_u64[i] = value;\n    }\n    for i in 4..8 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_b[(i-4)*8+j] as u64) << ((56 - j*8) as u64);\n        }\n         combined_u64[i] = value;\n    }\n\n    combined_u64\n}\n\n#[test]\nfn test_u8_32s_to_u64_16() {\n    let arr_a: [u8; 32] = [\n        131,24,83,91,84,16,93,74,122,174,96,192,143,196,95,150,135,24,27,79,223,198,37,189,26,117,63,167,57,127,237,117\n    ];\n    let arr_b: [u8; 32] = [\n        53,71,241,28,168,105,102,70,242,243,172,176,142,49,1,106,250,194,62,99,12,93,17,245,159,97,254,245,123,13,42,165\n    ];\n    let out = u8_32s_to_u64_16(arr_a, arr_b);\n\n    assert(out[0] == 9446391870127103306);\n    assert(out[1] == 8840109498736861078);\n    assert(out[2] == 9734560624431998397);\n    assert(out[3] == 1906500004718046581);\n    assert(out[4] == 3839302312743495238);\n    assert(out[5] == 17506526050819047786);\n    assert(out[6] == 18069073250093961717);\n    assert(out[7] == 11484740855056378533);\n    assert(out[8] == 0);\n    assert(out[9] == 0);\n    assert(out[10] == 0);\n    assert(out[11] == 0);\n    assert(out[12] == 0);\n    assert(out[13] == 0);\n    assert(out[14] == 0);\n    assert(out[15] == 0);\n    // the above output is the hex \"0x8318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5\"\n}\n\nfn u8_32_to_u8_64(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u8; 64] {\n    let mut combined: [u8; 64] = [0; 64];\n\n    for i in 0..32 {\n        combined[i] = arr_a[i];\n    }\n    for i in 0..32 {\n        combined[i + 32] = arr_b[i];\n    }\n\n    combined\n}\n\nunconstrained\nfn u8_32_to_u8_64_unconstrained(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u8; 64] {\n    let mut combined: [u8; 64] = [0; 64];\n\n    for i in 0..32 {\n        combined[i] = arr_a[i];\n    }\n    for i in 0..32 {\n        combined[i + 32] = arr_b[i];\n    }\n\n    combined\n}\n\n\nfn u64_4_to_u8_32(\n    array: [u64; 4]\n) -> [u8; 32] {\n    let mut output: [u8; 32] = [0; 32];\n    let mut output_index = 0;\n\n    for num_idx in 0..4 {\n        for bit_pos in 0..8 {\n            let shift_amount: u64 = 56 - (bit_pos * 8) as u64;\n            output[output_index] = ((array[num_idx] >> shift_amount) & 255) as u8;\n            output_index += 1;\n        }\n    }\n\n    output\n}\n\nunconstrained\nfn u64_4_to_u8_32_unconstrained(\n    array: [u64; 4]\n) -> [u8; 32] {\n    let mut output: [u8; 32] = [0; 32];\n    let mut output_index = 0;\n\n    for num_idx in 0..4 {\n        for bit_pos in 0..8 {\n            let shift_amount: u64 = 56 - (bit_pos * 8) as u64;\n            output[output_index] = ((array[num_idx] >> shift_amount) & 255) as u8;\n            output_index += 1;\n        }\n    }\n\n    output\n}\n\n#[test]\nfn test_u64_4_to_u8_32() {\n    let hash: [u64; 4] = [\n        999647796417551690,\n        8840109498736861078,\n        9734560624431998397,\n        1906500004718046581\n    ];\n \n    let arr_out = u64_4_to_u8_32(hash);\n\n    assert(arr_out[0] == 13);\n    assert(arr_out[1] == 223);\n    assert(arr_out[2] == 118);\n    assert(arr_out[3] == 95);\n    assert(arr_out[4] == 221);\n    assert(arr_out[5] == 248);\n    assert(arr_out[6] == 93);\n    assert(arr_out[7] == 74);\n    assert(arr_out[8] == 122);\n    assert(arr_out[9] == 174);\n    assert(arr_out[10] == 96);\n    assert(arr_out[11] == 192);\n    assert(arr_out[12] == 143);\n    assert(arr_out[13] == 196);\n    assert(arr_out[14] == 95);\n    assert(arr_out[15] == 150);\n    assert(arr_out[16] == 135);\n    assert(arr_out[17] == 24);\n    assert(arr_out[18] == 27);\n    assert(arr_out[19] == 79);\n    assert(arr_out[20] == 223);\n    assert(arr_out[21] == 198);\n    assert(arr_out[22] == 37);\n    assert(arr_out[23] == 189);\n    assert(arr_out[24] == 26);\n    assert(arr_out[25] == 117);\n    assert(arr_out[26] == 63);\n    assert(arr_out[27] == 167);\n    assert(arr_out[28] == 57);\n    assert(arr_out[29] == 127);\n    assert(arr_out[30] == 237);\n    assert(arr_out[31] == 117);\n}\n\n/// @dev this method is used to convert a u8 array to a u160 (which is not supported by Noir, so it's represented as a Field)\n/// @dev will throw on Field overflow\nfn u8_to_u160(\n    array: [u8]\n) -> Field {\n    let mut addr: Field = 0;\n\n    for i in 0..20 {\n        // only take the last 20 bytes of the hash\n        addr = (addr * 256) + (array[i] as Field);\n    }\n\n    addr\n}\n\nunconstrained\nfn u8_to_u160_unconstrained(\n    array: [u8]\n) -> Field {\n    let mut addr: Field = 0;\n\n    for i in 0..20 {\n        // only take the last 20 bytes of the hash\n        addr = (addr * 256) + (array[i] as Field);\n    }\n\n    addr\n}\n\nfn u8_to_eth_address(\n    array: [u8]\n) -> Field {\n    u8_to_u160(array)\n}\n\nunconstrained\nfn u8_to_eth_address_unconstrained(\n    array: [u8]\n) -> Field {\n    u8_to_u160(array)\n}\n\n#[test]\nfn test_u8_32_to_u160() {\n    // keccak hash of hardhat 0 address pub key (0xc1ffd3cfee2d9e5cd67643f8f39fd6e51aad88f6f4ce6ab8827279cfffb92266) as u8 array\n    let hashed_pub_key = [\n        193,255,211,207,238,45,158,92,214,118,67,248,243,159,214,229,26,173,136,246,244,206,106,184,130,114,121,207,255,185,34,102\n    ];\n\n    let mut right_20_bytes: [u8] = [0; 20];\n    for i in 0..20 {\n        right_20_bytes[i] = hashed_pub_key[i + 12];\n    }\n\n    let addr = u8_to_u160(right_20_bytes);\n    let addr_aliased = u8_to_eth_address(right_20_bytes);\n\n    assert(addr == addr_aliased);\n    assert(addr == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266); // hardhat address 0\n}\n\nfn split_u8_64(\n    arr: [u8; 64]\n) -> ([u8; 32], [u8; 32]) {\n    let mut arr_a: [u8; 32] = [0; 32];\n    let mut arr_b: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        arr_a[i] = arr[i];\n        arr_b[i] = arr[i + 32];\n    };\n\n    (arr_a, arr_b)\n}\n\nunconstrained\nfn split_u8_64_unconstrained(\n    arr: [u8; 64]\n) -> ([u8; 32], [u8; 32]) {\n    let mut arr_a: [u8; 32] = [0; 32];\n    let mut arr_b: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        arr_a[i] = arr[i];\n        arr_b[i] = arr[i + 32];\n    };\n\n    (arr_a, arr_b)\n}\n\n#[test]\nfn test_split_u8_64() {\n    let u8_64 = [\n        193,255,211,207,238,45,158,92,214,118,67,248,243,159,214,229,26,173,136,246,244,206,106,184,130,114,121,207,255,185,34,102,\n        193,255,211,207,238,45,158,92,214,118,67,248,243,159,214,229,26,173,136,246,244,206,106,184,130,114,121,207,255,185,34,102\n    ];\n\n    let (arr_a, arr_b) = split_u8_64(u8_64);\n\n    for i in 0..32 {\n        assert(arr_a[i] == u8_64[i]);\n        assert(arr_b[i] == u8_64[i + 32]);\n    }\n}\n",
      "path": "/Users/gabrielantonyxaviour/nargo/github.com/colinnielsen/noir-array-helpersv0.19.0/src/lib.nr"
    }
  }
}
