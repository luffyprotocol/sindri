{"noir_version":"0.23.0+5be9f9d7e2f39ca228df10e5a530474af0331704","hash":381773756272462786,"abi":{"parameters":[{"name":"signer_pub_x_key","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signer_pub_y_key","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"selected_players_points","type":{"kind":"array","length":11,"type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},"visibility":"private"},{"name":"player_points_merkle_paths","type":{"kind":"array","length":11,"type":{"kind":"array","length":6,"type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}}},"visibility":"private"},{"name":"all_player_points_merkle_root","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"captain","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"vice_captain","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"is_random","type":{"kind":"boolean"},"visibility":"public"},{"name":"selected_player_ids","type":{"kind":"array","length":11,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"selected_squad_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"claimed_player_points","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"public"}],"param_witnesses":{"all_player_points_merkle_root":[{"start":2592,"end":2624}],"captain":[{"start":2624,"end":2625}],"claimed_player_points":[{"start":2670,"end":2671}],"is_random":[{"start":2626,"end":2627}],"player_points_merkle_paths":[{"start":480,"end":2592}],"selected_player_ids":[{"start":2627,"end":2638}],"selected_players_points":[{"start":128,"end":480}],"selected_squad_hash":[{"start":2638,"end":2670}],"signature":[{"start":64,"end":128}],"signer_pub_x_key":[{"start":0,"end":32}],"signer_pub_y_key":[{"start":32,"end":64}],"vice_captain":[{"start":2625,"end":2626}]},"return_type":null,"return_witnesses":[]},"bytecode":"","debug_symbols":"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","file_map":{"44":{"source":"mod tests;\nuse dep::std;\nuse dep::ecrecover;\n\nglobal MERKLE_DEPTH = 6;\nfn main(\n    signer_pub_x_key: [u8; 32],\n    signer_pub_y_key: [u8; 32],\n    signature: [u8; 64],\n    selected_players_points: [[u8; 32]; 11],\n    player_points_merkle_paths: [[[u8; 32]; MERKLE_DEPTH]; 11],\n    all_player_points_merkle_root: [u8; 32],\n    captain: pub u8,\n    vice_captain: pub u8,\n    is_random: pub bool,\n    selected_player_ids: pub [u8; 11],\n    selected_squad_hash: pub [u8; 32],\n    claimed_player_points: pub u64\n) {\n    ecdsa_verification(\n        signer_pub_x_key,\n        signer_pub_y_key,\n        signature,\n        selected_squad_hash\n    );\n\n    verify_squad_hash(selected_player_ids, selected_squad_hash);\n\n    // verify_all_merkle_roots(\n    //     selected_player_ids,\n    //     selected_players_points,\n    //     player_points_merkle_paths,\n    //     all_player_points_merkle_root\n    // );\n\n    calculate_points(\n        selected_players_points,\n        claimed_player_points,\n        captain,\n        vice_captain,\n        is_random\n    );\n}\n\nfn verify_squad_hash(player_ids: [u8; 11], squad_hash: [u8; 32]) {\n    let computed_squad_hash= std::hash::keccak256(player_ids, 11);\n    assert(computed_squad_hash == squad_hash);\n}\n\nfn ecdsa_verification(\n    signer_pub_x_key: [u8; 32],\n    signer_pub_y_key: [u8; 32],\n    signature: [u8; 64],\n    hash: [u8; 32]\n) {\n    let computedAddress: Field = ecrecover::secp256k1::PubKey::from_xy(signer_pub_x_key, signer_pub_y_key).to_eth_address(); // Compute address from public key\n    let recoveredAddress = ecrecover::ecrecover(signer_pub_x_key, signer_pub_y_key, signature, hash);\n\n    assert(computedAddress == recoveredAddress);\n}\n\nfn verify_all_merkle_roots(\n    player_ids: [u8; 11],\n    players_points: [[u8; 32]; 11],\n    merkle_paths: [[[u8; 32]; MERKLE_DEPTH]; 11],\n    merkle_root: [u8; 32]\n) {\n    for i in 0..11 {\n        compute_and_verify_merkle_root(players_points[i], player_ids[i], merkle_paths[i], merkle_root);\n    }\n}\n\nfn compute_and_verify_merkle_root(\n    leaf: [u8; 32],\n    leaf_index: u8,\n    proof: [[u8; 32]; MERKLE_DEPTH],\n    all_points_merkle_root: [u8; 32]\n) {\n    let mut computed_merkle_root: [u8; 32] = [0; 32];\n    computed_merkle_root=leaf;\n    let mut leaf_index_mut= leaf_index;\n    for i in 0..MERKLE_DEPTH {\n        if leaf_index_mut % 2 == 0 {\n            computed_merkle_root = std::hash::keccak256(concatenate_leafs(computed_merkle_root, proof[i]), 64);\n        } else {\n            computed_merkle_root = std::hash::keccak256(concatenate_leafs(proof[i], computed_merkle_root), 64);\n        }\n        leaf_index_mut = leaf_index_mut / 2;\n    }\n\n    assert(computed_merkle_root == all_points_merkle_root);\n}\n\nfn concatenate_leafs(leaf1: [u8; 32], leaf2: [u8; 32]) -> [u8; 64] {\n    let mut arr: [u8; 64] = [0; 64];\n    for i in 0..32 {\n        arr[i] = leaf1[i];\n        arr[i + 32] = leaf2[i];\n    }\n    arr\n}\n\nfn calculate_points(\n    player_points: [[u8; 32]; 11],\n    claimed_player_points: u64,\n    captain: u8,\n    vice_captain: u8,\n    is_random: bool\n) {\n    let mut calculated_total_points: u64 = 0;\n    let mut counter: u8 = 0;\n    let mut captainMultiplier: u64 = 0;\n    let mut vice_captainMultiplier: u64 = 0;\n\n    if is_random {\n        captainMultiplier = 4;\n        vice_captainMultiplier = 3;\n    } else {\n        captainMultiplier = 3;\n        vice_captainMultiplier = 2;\n    }\n\n    for point in player_points {\n        let mut player_point: u64 = 0;\n        for byte in point {\n            player_point += byte as u64;\n        }\n        if counter == captain {\n            player_point = player_point * captainMultiplier;\n        } else if counter == vice_captain {\n            player_point = player_point * vice_captainMultiplier;\n        }\n        calculated_total_points += player_point;\n        counter += 1;\n    }\n\n    assert(calculated_total_points == claimed_player_points);\n}\n","path":"/Users/gabrielantonyxaviour/Developer/projects/luffy/sindri/circuits/src/main.nr"},"45":{"source":"use dep::std;\n \nmod secp256k1;\n\nfn ecrecover(\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64], // clip v value\n    hashed_message: [u8; 32]\n) -> Field {\n    let key = secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);\n\n    assert(key.verify_sig(signature, hashed_message));\n    let addr = key.to_eth_address();\n\n    addr\n}\n\n#[test]\nfn test_ecrecover() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let addr = ecrecover(pub_key_x, pub_key_y, signature, hashed_message);\n    assert(addr == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/Users/gabrielantonyxaviour/nargo/github.com/colinnielsen/ecrecover-noirv0.19.0/src/lib.nr"},"46":{"source":"use dep::std;\n\nuse dep::array_helpers;\n\nstruct PubKey {\n    pub_x: [u8; 32],\n    pub_y: [u8; 32],\n}\n\nunconstrained\nfn split_uncompressed_pub_key(\n    pub_key: [u8; 65]\n) -> ([u8; 32], [u8; 32]) {\n    let mut pub_key_x: [u8; 32] = [0; 32];\n    let mut pub_key_y: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        pub_key_x[i] = pub_key[i + 1];\n        pub_key_y[i] = pub_key[i + 32 + 1];\n    };\n\n    (pub_key_x, pub_key_y)\n}\n\nimpl PubKey {\n    fn from_xy(pub_x: [u8; 32], pub_y: [u8; 32]) -> PubKey {\n        PubKey {\n            pub_x,\n            pub_y,\n        }\n    }\n\n    fn from_unified(pub_key: [u8; 64]) -> PubKey {\n        let (key_x, key_y) = array_helpers::split_u8_64_unconstrained(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    fn from_uncompressed(pub_key: [u8; 65]) -> PubKey {\n        assert(pub_key[0] == 0x04);\n        let (key_x, key_y) = split_uncompressed_pub_key(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    fn verify_sig(self, signature: [u8; 64], hashed_message: [u8; 32]) -> bool {\n        std::ecdsa_secp256k1::verify_signature(self.pub_x, self.pub_y, signature, hashed_message)\n    }\n\n    fn to_eth_address(self) -> Field {\n        let pub_key = array_helpers::u8_32_to_u8_64_unconstrained(self.pub_x, self.pub_y);\n        let hashed_pub_key = std::hash::keccak256(pub_key, 64);\n\n        let mut addr: Field = 0;\n        for i in 0..20 {\n            // shift left by 8 and add the new value\n            addr = (addr * 256) + hashed_pub_key[i + 12] as Field;\n        }\n\n        addr\n    }\n\n    fn ecrecover(\n        self,\n        signature: [u8; 64],\n        hashed_message: [u8; 32]\n    ) -> Field {\n        assert(self.verify_sig(signature, hashed_message));\n\n        self.to_eth_address()\n    }\n}\n\n\n#[test]\nfn test_ecrecover_via_key() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let key = PubKey::from_xy(pub_key_x, pub_key_y);\n    assert(key.ecrecover(signature, hashed_message) == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/Users/gabrielantonyxaviour/nargo/github.com/colinnielsen/ecrecover-noirv0.19.0/src/secp256k1.nr"},"47":{"source":"use dep::std;\n\nfn u8_32s_to_u64_16(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u64; 16] {\n    let mut combined_u64: [u64; 16] = [0; 16];\n    \n    for i in 0..4 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_a[i*8+j] as u64) << ((56 - j*8) as u64);\n        }\n         combined_u64[i] = value;\n    }\n    for i in 4..8 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_b[(i-4)*8+j] as u64) << ((56 - j*8) as u64);\n        }\n         combined_u64[i] = value;\n    }\n\n    combined_u64\n}\n\nunconstrained\nfn u8_32s_to_u64_16_unconstrained(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u64; 16] {\n    let mut combined_u64: [u64; 16] = [0; 16];\n    \n    for i in 0..4 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_a[i*8+j] as u64) << ((56 - j*8) as u64);\n        }\n         combined_u64[i] = value;\n    }\n    for i in 4..8 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_b[(i-4)*8+j] as u64) << ((56 - j*8) as u64);\n        }\n         combined_u64[i] = value;\n    }\n\n    combined_u64\n}\n\n#[test]\nfn test_u8_32s_to_u64_16() {\n    let arr_a: [u8; 32] = [\n        131,24,83,91,84,16,93,74,122,174,96,192,143,196,95,150,135,24,27,79,223,198,37,189,26,117,63,167,57,127,237,117\n    ];\n    let arr_b: [u8; 32] = [\n        53,71,241,28,168,105,102,70,242,243,172,176,142,49,1,106,250,194,62,99,12,93,17,245,159,97,254,245,123,13,42,165\n    ];\n    let out = u8_32s_to_u64_16(arr_a, arr_b);\n\n    assert(out[0] == 9446391870127103306);\n    assert(out[1] == 8840109498736861078);\n    assert(out[2] == 9734560624431998397);\n    assert(out[3] == 1906500004718046581);\n    assert(out[4] == 3839302312743495238);\n    assert(out[5] == 17506526050819047786);\n    assert(out[6] == 18069073250093961717);\n    assert(out[7] == 11484740855056378533);\n    assert(out[8] == 0);\n    assert(out[9] == 0);\n    assert(out[10] == 0);\n    assert(out[11] == 0);\n    assert(out[12] == 0);\n    assert(out[13] == 0);\n    assert(out[14] == 0);\n    assert(out[15] == 0);\n    // the above output is the hex \"0x8318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5\"\n}\n\nfn u8_32_to_u8_64(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u8; 64] {\n    let mut combined: [u8; 64] = [0; 64];\n\n    for i in 0..32 {\n        combined[i] = arr_a[i];\n    }\n    for i in 0..32 {\n        combined[i + 32] = arr_b[i];\n    }\n\n    combined\n}\n\nunconstrained\nfn u8_32_to_u8_64_unconstrained(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u8; 64] {\n    let mut combined: [u8; 64] = [0; 64];\n\n    for i in 0..32 {\n        combined[i] = arr_a[i];\n    }\n    for i in 0..32 {\n        combined[i + 32] = arr_b[i];\n    }\n\n    combined\n}\n\n\nfn u64_4_to_u8_32(\n    array: [u64; 4]\n) -> [u8; 32] {\n    let mut output: [u8; 32] = [0; 32];\n    let mut output_index = 0;\n\n    for num_idx in 0..4 {\n        for bit_pos in 0..8 {\n            let shift_amount: u64 = 56 - (bit_pos * 8) as u64;\n            output[output_index] = ((array[num_idx] >> shift_amount) & 255) as u8;\n            output_index += 1;\n        }\n    }\n\n    output\n}\n\nunconstrained\nfn u64_4_to_u8_32_unconstrained(\n    array: [u64; 4]\n) -> [u8; 32] {\n    let mut output: [u8; 32] = [0; 32];\n    let mut output_index = 0;\n\n    for num_idx in 0..4 {\n        for bit_pos in 0..8 {\n            let shift_amount: u64 = 56 - (bit_pos * 8) as u64;\n            output[output_index] = ((array[num_idx] >> shift_amount) & 255) as u8;\n            output_index += 1;\n        }\n    }\n\n    output\n}\n\n#[test]\nfn test_u64_4_to_u8_32() {\n    let hash: [u64; 4] = [\n        999647796417551690,\n        8840109498736861078,\n        9734560624431998397,\n        1906500004718046581\n    ];\n \n    let arr_out = u64_4_to_u8_32(hash);\n\n    assert(arr_out[0] == 13);\n    assert(arr_out[1] == 223);\n    assert(arr_out[2] == 118);\n    assert(arr_out[3] == 95);\n    assert(arr_out[4] == 221);\n    assert(arr_out[5] == 248);\n    assert(arr_out[6] == 93);\n    assert(arr_out[7] == 74);\n    assert(arr_out[8] == 122);\n    assert(arr_out[9] == 174);\n    assert(arr_out[10] == 96);\n    assert(arr_out[11] == 192);\n    assert(arr_out[12] == 143);\n    assert(arr_out[13] == 196);\n    assert(arr_out[14] == 95);\n    assert(arr_out[15] == 150);\n    assert(arr_out[16] == 135);\n    assert(arr_out[17] == 24);\n    assert(arr_out[18] == 27);\n    assert(arr_out[19] == 79);\n    assert(arr_out[20] == 223);\n    assert(arr_out[21] == 198);\n    assert(arr_out[22] == 37);\n    assert(arr_out[23] == 189);\n    assert(arr_out[24] == 26);\n    assert(arr_out[25] == 117);\n    assert(arr_out[26] == 63);\n    assert(arr_out[27] == 167);\n    assert(arr_out[28] == 57);\n    assert(arr_out[29] == 127);\n    assert(arr_out[30] == 237);\n    assert(arr_out[31] == 117);\n}\n\n/// @dev this method is used to convert a u8 array to a u160 (which is not supported by Noir, so it's represented as a Field)\n/// @dev will throw on Field overflow\nfn u8_to_u160(\n    array: [u8]\n) -> Field {\n    let mut addr: Field = 0;\n\n    for i in 0..20 {\n        // only take the last 20 bytes of the hash\n        addr = (addr * 256) + (array[i] as Field);\n    }\n\n    addr\n}\n\nunconstrained\nfn u8_to_u160_unconstrained(\n    array: [u8]\n) -> Field {\n    let mut addr: Field = 0;\n\n    for i in 0..20 {\n        // only take the last 20 bytes of the hash\n        addr = (addr * 256) + (array[i] as Field);\n    }\n\n    addr\n}\n\nfn u8_to_eth_address(\n    array: [u8]\n) -> Field {\n    u8_to_u160(array)\n}\n\nunconstrained\nfn u8_to_eth_address_unconstrained(\n    array: [u8]\n) -> Field {\n    u8_to_u160(array)\n}\n\n#[test]\nfn test_u8_32_to_u160() {\n    // keccak hash of hardhat 0 address pub key (0xc1ffd3cfee2d9e5cd67643f8f39fd6e51aad88f6f4ce6ab8827279cfffb92266) as u8 array\n    let hashed_pub_key = [\n        193,255,211,207,238,45,158,92,214,118,67,248,243,159,214,229,26,173,136,246,244,206,106,184,130,114,121,207,255,185,34,102\n    ];\n\n    let mut right_20_bytes: [u8] = [0; 20];\n    for i in 0..20 {\n        right_20_bytes[i] = hashed_pub_key[i + 12];\n    }\n\n    let addr = u8_to_u160(right_20_bytes);\n    let addr_aliased = u8_to_eth_address(right_20_bytes);\n\n    assert(addr == addr_aliased);\n    assert(addr == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266); // hardhat address 0\n}\n\nfn split_u8_64(\n    arr: [u8; 64]\n) -> ([u8; 32], [u8; 32]) {\n    let mut arr_a: [u8; 32] = [0; 32];\n    let mut arr_b: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        arr_a[i] = arr[i];\n        arr_b[i] = arr[i + 32];\n    };\n\n    (arr_a, arr_b)\n}\n\nunconstrained\nfn split_u8_64_unconstrained(\n    arr: [u8; 64]\n) -> ([u8; 32], [u8; 32]) {\n    let mut arr_a: [u8; 32] = [0; 32];\n    let mut arr_b: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        arr_a[i] = arr[i];\n        arr_b[i] = arr[i + 32];\n    };\n\n    (arr_a, arr_b)\n}\n\n#[test]\nfn test_split_u8_64() {\n    let u8_64 = [\n        193,255,211,207,238,45,158,92,214,118,67,248,243,159,214,229,26,173,136,246,244,206,106,184,130,114,121,207,255,185,34,102,\n        193,255,211,207,238,45,158,92,214,118,67,248,243,159,214,229,26,173,136,246,244,206,106,184,130,114,121,207,255,185,34,102\n    ];\n\n    let (arr_a, arr_b) = split_u8_64(u8_64);\n\n    for i in 0..32 {\n        assert(arr_a[i] == u8_64[i]);\n        assert(arr_b[i] == u8_64[i + 32]);\n    }\n}\n","path":"/Users/gabrielantonyxaviour/nargo/github.com/colinnielsen/noir-array-helpersv0.19.0/src/lib.nr"}}}